---
format: gfm
jupyter: python3
---
<!-- This file is generated by README.qmd; please do not edit by hand -->

# soilgrids

This package provides a minimal wrapper for the ISRIC Soilgrids API, allowing 
users to query soil properties by latitude/longitude and to perform basic 
analyses on the returned data.

Functions:

*   `get_soilgrids()`: Provides a simple wrapper for the /properties/query
    API endpoint, parsing the geojson response into a pandas DataFrame.
        
Classes:

*   `SoilGrids()`: Provides methods for reading data from Soilgrids and basic 
    including utilities for aggregating and analysing the returned data.

Useful links:

*   Documentation for the API: <https://rest.isric.org/soilgrids/v2.0/docs>
*   ISRIC REST entry page, including fair use policy: <https://rest.isric.org>
*   ISRIC data and software policy: <https://www.isric.org/about/data-policy>
*   Soilgrids FAQ: <https://www.isric.org/explore/soilgrids/faq-soilgrids>

## Querying data using `SoilGrids`:
The following code reads in the mean values for clay, sand, silt and ocs 
(organic carbon stock) in the top 30cm of soil for a random set of 50 points 
within roughly 25km of 
[Herning, Denmark](https://en.wikipedia.org/wiki/Herning). Note that points can 
be queried at a maximum rate of 5/minute, so the following code takes about 10 
minutes to run:

```{python}
#| output: asis

# ~~~ Tweak some settings for cleaner notebook results ~~~ #
import logging
logging.getLogger('soilgrids').setLevel(logging.ERROR)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Â #

from soilgrids import SoilGrids
import pandas as pd

sg = SoilGrids()

sg.get_points_sample(
    50,
    lat_min=56.225297, lat_max=55.958103,
    lon_min=8.662215, lon_max=9.354390,
    soil_property=['clay', 'sand', 'silt', 'ocs'],
    depth=['0-5cm', '5-15cm', '15-30cm', '0-30cm'],
    value='mean'
)

data = sg.data \
    .filter([
        'lat', 'lon', 'soil_property', 'mapped_units', 
        'target_units', 'depth', 'mean'
    ])

print(data.to_markdown(index=False))
```

## Get the property (clay, sand, silt) with the highest value for each point
The `SoilGrids` class provides a handy utility `main_properties()` for finding
the most abundant soil type (i.e. property) for each point. In this case, we
see that the Herning region is quite sandy:

```{python}
#| output: asis

main_properties = sg.main_properties()

print(main_properties.to_markdown(index=False))
```

## Relationship between clay, sand, silt and organic carbon stock
The `ocs_correlation()` method fits and displays summary statistics for a linear 
model using sand, clay and silt as predictors and OCS as the response variable. 
In this case, we find these soil properties are quite effective at predicting 
OCS, explaining around 90% of the variance:

```{python}
#| eval: false

print(sg.ocs_correlation(capture_output=True))
```

## Disclaimers

*   Use of this package is subject to [ISRIC data and software policy](https://www.isric.org/about/data-policy).
*   This package is licensed as [GPL-2](LICENSE).
